OpenShadingLanguage 1.00
# Compiled by oslc 1.8.2.pixar1697a56
# options: 
shader flow_color
param	float	shader_property_0	0		%meta{int,lockgeom,0}  %read{5,5} %write{2147483647,-1}
param	float	shader_property_1	0		%meta{int,lockgeom,0}  %read{5,5} %write{2147483647,-1}
param	float	shader_property_2	0		%meta{int,lockgeom,0}  %read{5,5} %write{2147483647,-1}
param	point	Pobj	0 0 0		%meta{int,lockgeom,0}  %read{4,4} %write{2147483647,-1}
param	vector	temp	1 0 0		%read{2147483647,-1} %write{2147483647,-1}
param	color	base_color	0.292 0.211 0.13699999		%read{50,50} %write{2147483647,-1}
param	color	second_color	0 0 0		%read{50,50} %write{3,3} %initexpr
param	float	blur	0.001		%read{2147483647,-1} %write{2147483647,-1}
param	float	center	0		%read{2147483647,-1} %write{2147483647,-1}
oparam	float	resultF	0		%read{2147483647,-1} %write{63,63}
oparam	color	resultRGB	0 0 0		%read{2147483647,-1} %write{50,50}
local	float	___324_n2	%read{60,60} %write{54,54}
local	float	___324_n3	%read{60,60} %write{59,59}
local	point	pp	%read{8,16} %write{4,4}
local	point	tpp	%read{19,55} %write{10,18}
local	vector	victor	%read{6,6} %write{5,5}
local	normal	dir_normalized	%read{7,15} %write{6,6}
local	float	k	%read{28,47} %write{23,23}
local	float	scale_displ	%read{25,30} %write{24,24}
local	float	width_displ	%read{34,46} %write{25,25}
local	float	scale_col	%read{27,33} %write{26,26}
local	float	width_col	%read{40,42} %write{27,27}
local	float	cent_displ	%read{34,47} %write{30,30}
local	float	cent_col	%read{40,43} %write{33,33}
local	float	blend_displ	%read{49,63} %write{39,62}
local	float	blend_col	%read{50,50} %write{45,45}
const	float	$const1	0.292		%read{0,0} %write{2147483647,-1}
const	int	$const2	10		%read{24,26} %write{2147483647,-1}
temp	float	$tmp1	%read{3,3} %write{0,0}
const	float	$const3	10		%read{0,27} %write{2147483647,-1}
const	float	$const4	0.211		%read{1,1} %write{2147483647,-1}
temp	float	$tmp2	%read{3,3} %write{1,1}
const	float	$const5	0.13699999		%read{2,2} %write{2147483647,-1}
temp	float	$tmp3	%read{3,3} %write{2,2}
const	int	$const6	0		%read{7,19} %write{2147483647,-1}
temp	float	$tmp4	%read{9,9} %write{7,7}
temp	float	$tmp5	%read{9,9} %write{8,8}
temp	float	$tmp6	%read{10,10} %write{9,9}
const	int	$const7	1		%read{11,20} %write{2147483647,-1}
temp	float	$tmp7	%read{13,13} %write{11,11}
temp	float	$tmp8	%read{13,13} %write{12,12}
temp	float	$tmp9	%read{14,14} %write{13,13}
const	int	$const8	2		%read{15,22} %write{2147483647,-1}
temp	float	$tmp10	%read{17,17} %write{15,15}
temp	float	$tmp11	%read{17,17} %write{16,16}
temp	float	$tmp12	%read{18,18} %write{17,17}
temp	float	$tmp13	%read{21,21} %write{19,19}
temp	float	$tmp14	%read{21,21} %write{20,20}
temp	float	$tmp15	%read{23,23} %write{21,21}
temp	float	$tmp16	%read{23,23} %write{22,22}
temp	float	$tmp17	%read{30,30} %write{29,29}
temp	float	$tmp18	%read{29,29} %write{28,28}
temp	float	$tmp19	%read{33,33} %write{32,32}
temp	float	$tmp20	%read{32,32} %write{31,31}
temp	float	$tmp21	%read{39,39} %write{35,35}
temp	float	$tmp22	%read{35,35} %write{34,34}
temp	float	$tmp23	%read{38,38} %write{37,37}
temp	float	$tmp24	%read{37,37} %write{36,36}
temp	float	$tmp25	%read{39,39} %write{38,38}
const	float	$const9	1		%read{38,48} %write{2147483647,-1}
temp	float	$tmp26	%read{45,45} %write{41,41}
temp	float	$tmp27	%read{41,41} %write{40,40}
temp	float	$tmp28	%read{44,44} %write{43,43}
temp	float	$tmp29	%read{43,43} %write{42,42}
temp	float	$tmp30	%read{45,45} %write{44,44}
temp	float	$tmp31	%read{48,48} %write{47,47}
temp	float	$tmp32	%read{47,47} %write{46,46}
temp	float	$tmp33	%read{49,49} %write{48,48}
temp	float	$tmp34	%read{61,61} %write{60,60}
const	float	$const11	70		%read{52,55} %write{2147483647,-1}
const	float	$const13	3		%read{54,58} %write{2147483647,-1}
const	float	$const15	5		%read{56,59} %write{2147483647,-1}
const	string	$const16	"fbm2"		%read{51,51} %write{2147483647,-1}
temp	float	$tmp35	%read{54,54} %write{53,53}
const	string	$const17	"perlin"		%read{53,57} %write{2147483647,-1}
temp	point	$tmp36	%read{53,53} %write{52,52}
temp	float	$tmp37	%read{58,58} %write{57,57}
temp	point	$tmp38	%read{56,56} %write{55,55}
temp	point	$tmp39	%read{57,57} %write{56,56}
temp	float	$tmp40	%read{59,59} %write{58,58}
const	float	$const18	0.1		%read{61,61} %write{2147483647,-1}
temp	float	$tmp41	%read{62,62} %write{61,61}
const	float	$const19	0.0099999998		%read{63,63} %write{2147483647,-1}
code second_color
# flow_color.osl:26
# 	color second_color = color(0.292/10,0.211/10,0.137/10),
	div		$tmp1 $const1 $const3 	%filename{"flow_color.osl"} %line{26} %argrw{"wrr"}
	div		$tmp2 $const4 $const3 	%argrw{"wrr"}
	div		$tmp3 $const5 $const3 	%argrw{"wrr"}
	color		second_color $tmp1 $tmp2 $tmp3 	%argrw{"wrrr"}
code ___main___
# flow_color.osl:34
# 	point pp = Pobj;
	assign		pp Pobj 	%filename{"flow_color.osl"} %line{34} %argrw{"wr"}
# flow_color.osl:36
# 	vector victor = vector(shader_property_0,shader_property_1,shader_property_2);
	vector		victor shader_property_0 shader_property_1 shader_property_2 	%line{36} %argrw{"wrrr"}
# flow_color.osl:37
# 	normal dir_normalized = normalize(victor);
	normalize	dir_normalized victor 	%line{37} %argrw{"wr"}
# flow_color.osl:38
# 	tpp[0] = dir_normalized[0] * pp[0];
	compref		$tmp4 dir_normalized $const6 	%line{38} %argrw{"wrr"}
	compref		$tmp5 pp $const6 	%argrw{"wrr"}
	mul		$tmp6 $tmp4 $tmp5 	%argrw{"wrr"}
	compassign	tpp $const6 $tmp6 	%argrw{"wrr"}
# flow_color.osl:39
# 	tpp[1] = dir_normalized[1] * pp[1];
	compref		$tmp7 dir_normalized $const7 	%line{39} %argrw{"wrr"}
	compref		$tmp8 pp $const7 	%argrw{"wrr"}
	mul		$tmp9 $tmp7 $tmp8 	%argrw{"wrr"}
	compassign	tpp $const7 $tmp9 	%argrw{"wrr"}
# flow_color.osl:40
# 	tpp[2] = dir_normalized[2] * pp[2];
	compref		$tmp10 dir_normalized $const8 	%line{40} %argrw{"wrr"}
	compref		$tmp11 pp $const8 	%argrw{"wrr"}
	mul		$tmp12 $tmp10 $tmp11 	%argrw{"wrr"}
	compassign	tpp $const8 $tmp12 	%argrw{"wrr"}
# flow_color.osl:41
# 	float k = tpp[0] + tpp[1]+tpp[2];
	compref		$tmp13 tpp $const6 	%line{41} %argrw{"wrr"}
	compref		$tmp14 tpp $const7 	%argrw{"wrr"}
	add		$tmp15 $tmp13 $tmp14 	%argrw{"wrr"}
	compref		$tmp16 tpp $const8 	%argrw{"wrr"}
	add		k $tmp15 $tmp16 	%argrw{"wrr"}
# flow_color.osl:42
# 	float scale_displ = 10;//0.05;
	assign		scale_displ $const2 	%line{42} %argrw{"wr"}
# flow_color.osl:43
# 	float width_displ = scale_displ/10;//0.03;
	div		width_displ scale_displ $const3 	%line{43} %argrw{"wrr"}
# flow_color.osl:44
# 	float scale_col = 10;//0.005;
	assign		scale_col $const2 	%line{44} %argrw{"wr"}
# flow_color.osl:45
# 	float width_col = scale_col/10;//0.01;
	div		width_col scale_col $const3 	%line{45} %argrw{"wrr"}
# flow_color.osl:46
# 	float cent_displ = scale_displ*round(   k /scale_displ);
	div		$tmp18 k scale_displ 	%line{46} %argrw{"wrr"}
	round		$tmp17 $tmp18 	%argrw{"wr"}
	mul		cent_displ scale_displ $tmp17 	%argrw{"wrr"}
# flow_color.osl:47
# 	float cent_col =   scale_col*round(   k /scale_col);
	div		$tmp20 k scale_col 	%line{47} %argrw{"wrr"}
	round		$tmp19 $tmp20 	%argrw{"wr"}
	mul		cent_col scale_col $tmp19 	%argrw{"wrr"}
# flow_color.osl:52
# 	float blend_displ = smoothstep(  cent_displ - width_displ, cent_displ, k) * (1 - smoothstep(cent_displ , cent_displ+ width_displ, k));
	sub		$tmp22 cent_displ width_displ 	%line{52} %argrw{"wrr"}
	smoothstep	$tmp21 $tmp22 cent_displ k 	%argrw{"wrrr"}
	add		$tmp24 cent_displ width_displ 	%argrw{"wrr"}
	smoothstep	$tmp23 cent_displ $tmp24 k 	%argrw{"wrrr"}
	sub		$tmp25 $const9 $tmp23 	%argrw{"wrr"}
	mul		blend_displ $tmp21 $tmp25 	%argrw{"wrr"}
# flow_color.osl:53
# 	float blend_col   = smoothstep(  cent_col - width_col, cent_col, k) * (1 - smoothstep(cent_col , cent_col+ width_col, k));	
	sub		$tmp27 cent_col width_col 	%line{53} %argrw{"wrr"}
	smoothstep	$tmp26 $tmp27 cent_col k 	%argrw{"wrrr"}
	add		$tmp29 cent_col width_col 	%argrw{"wrr"}
	smoothstep	$tmp28 cent_col $tmp29 k 	%argrw{"wrrr"}
	sub		$tmp30 $const9 $tmp28 	%argrw{"wrr"}
	mul		blend_col $tmp26 $tmp30 	%argrw{"wrr"}
# flow_color.osl:54
# 	blend_displ       = blend_displ * (1-smoothstep (cent_displ,cent_displ +width_displ,k) );
	add		$tmp32 cent_displ width_displ 	%line{54} %argrw{"wrr"}
	smoothstep	$tmp31 cent_displ $tmp32 k 	%argrw{"wrrr"}
	sub		$tmp33 $const9 $tmp31 	%argrw{"wrr"}
	mul		blend_displ blend_displ $tmp33 	%argrw{"wrr"}
# flow_color.osl:55
# 	resultRGB         = mix(base_color,second_color,blend_col);
	mix		resultRGB base_color second_color blend_col 	%line{55} %argrw{"wrrr"}
# flow_color.osl:56
# 	blend_displ       += fbm2(tpp,70,3,5)*.1;
	functioncall	$const16 61 	%line{56} %argrw{"r"}
# flow_color.osl:4
# 		float n2= noise("perlin",pp*freq ) * ampl ;
	mul		$tmp36 tpp $const11 	%line{4} %argrw{"wrr"}
	noise		$tmp35 $const17 $tmp36 	%argrw{"wrr"}
	mul		___324_n2 $tmp35 $const13 	%argrw{"wrr"}
# flow_color.osl:5
# 	float n3= noise("perlin",pp*freq*high_freq_multiplier ) * ampl/high_freq_multiplier ;
	mul		$tmp38 tpp $const11 	%line{5} %argrw{"wrr"}
	mul		$tmp39 $tmp38 $const15 	%argrw{"wrr"}
	noise		$tmp37 $const17 $tmp39 	%argrw{"wrr"}
	mul		$tmp40 $tmp37 $const13 	%argrw{"wrr"}
	div		___324_n3 $tmp40 $const15 	%argrw{"wrr"}
# flow_color.osl:6
# 	return  n2 + n3;
	add		$tmp34 ___324_n2 ___324_n3 	%line{6} %argrw{"wrr"}
# flow_color.osl:56
# 	blend_displ       += fbm2(tpp,70,3,5)*.1;
	mul		$tmp41 $tmp34 $const18 	%line{56} %argrw{"wrr"}
	add		blend_displ blend_displ $tmp41 	%argrw{"wrr"}
# flow_color.osl:57
# 	resultF           = blend_displ*0.01;
	mul		resultF blend_displ $const19 	%line{57} %argrw{"wrr"}
	end
