OpenShadingLanguage 1.00
# Compiled by oslc 1.8.2.pixar1697a56
# options: 
shader exfoliation_color
param	float	minheight	1.25		%read{2147483647,-1} %write{2147483647,-1}
param	float	maxheight	2.5		%read{2147483647,-1} %write{2147483647,-1}
param	float	step_size	0.1		%read{18,18} %write{2147483647,-1}
param	float	min_offset	0.1		%read{2147483647,-1} %write{2147483647,-1}
param	vector	direction	1 0 0		%read{1,1} %write{2147483647,-1}
param	int	details	1		%read{55,55} %write{2147483647,-1}
param	int	medium_details	2		%read{64,257} %write{2147483647,-1}
param	point	Pobj	0 0 0		%meta{int,lockgeom,0}  %read{0,0} %write{2147483647,-1}
param	point	Nobj	0 0 0		%meta{int,lockgeom,0}  %read{2147483647,-1} %write{2147483647,-1}
param	float	shader_property_0	0		%meta{int,lockgeom,0}  %read{19,19} %write{2147483647,-1}
param	int	scale	1		%read{278,292} %write{2147483647,-1}
param	int	level_of_details	4		%read{2147483647,-1} %write{2147483647,-1}
param	color	mincolor	1 0 0		%read{262,309} %write{2147483647,-1}
param	color	maxcolor	1 0 0		%read{307,307} %write{2147483647,-1}
param	color	base_color	1 0 0		%read{46,271} %write{2147483647,-1}
param	color	second_color	1 0 0		%read{2147483647,-1} %write{2147483647,-1}
oparam	float	resultDispl	0		%read{2147483647,-1} %write{2147483647,-1}
oparam	color	resultRGB	0 0 0		%read{2147483647,-1} %write{312,312}
oparam	float	resultF	0		%read{2147483647,-1} %write{311,311}
local	float	___325_n2	%read{55,305} %write{55,299}
local	float	___325_n3	%read{55,305} %write{55,304}
local	point	___326_tpp	%read{55,277} %write{55,277}
local	float	___326_high_freq_multiplier	%read{55,277} %write{55,277}
local	normal	___326_dir_normalized	%read{55,277} %write{55,277}
local	float	___326_k	%read{55,277} %write{55,277}
local	float	___326_n	%read{55,277} %write{55,277}
local	float	___326_blend	%read{55,277} %write{55,277}
local	point	pp	%read{3,300} %write{0,0}
local	point	tpp	%read{24,27} %write{5,13}
local	normal	dir_normalized	%read{2,277} %write{1,1}
local	float	ampl	%read{2147483647,-1} %write{14,14}
local	float	freq	%read{2147483647,-1} %write{15,15}
local	float	high_freq_multiplier	%read{2147483647,-1} %write{16,16}
local	float	small_details_scale	%read{295,295} %write{17,17}
local	float	step_increase	%read{20,277} %write{18,29}
local	float	s_min	%read{20,277} %write{19,277}
local	float	s_max	%read{55,277} %write{20,277}
local	float	s_min_col	%read{23,277} %write{21,277}
local	float	s_max_col	%read{55,277} %write{23,277}
local	float	k	%read{2147483647,-1} %write{28,28}
local	float	offset	%read{282,290} %write{30,30}
local	int	i	%read{55,277} %write{31,277}
local	float	blend	%read{2147483647,-1} %write{32,32}
local	float	blur	%read{55,277} %write{33,33}
local	float	noise_strength	%read{55,277} %write{34,34}
local	float	minor_rings_offset	%read{55,277} %write{35,35}
local	float	minor_rings	%read{55,277} %write{36,277}
local	float	res	%read{55,311} %write{37,277}
local	float	temp	%read{55,309} %write{38,308}
local	float	s_min2	%read{2147483647,-1} %write{39,277}
local	float	s_max2	%read{55,277} %write{40,277}
local	float	s_min_col2	%read{2147483647,-1} %write{41,277}
local	float	s_max_col2	%read{2147483647,-1} %write{42,277}
local	float	randomness	%read{55,277} %write{43,43}
local	float	randomness2	%read{55,277} %write{44,44}
local	float	color_ring	%read{55,277} %write{45,277}
local	color	cols	%read{55,277} %write{46,277}
local	float	random_multiplier	%read{55,277} %write{47,47}
local	float	temp2	%read{55,277} %write{48,277}
local	int	j	%read{55,277} %write{49,277}
local	float	color_ring2	%read{55,277} %write{50,277}
local	float	color_offset	%read{55,277} %write{51,51}
local	color	col	%read{55,310} %write{52,277}
local	float	___330_rand0	%read{55,277} %write{55,277}
local	float	___330_rand1	%read{55,277} %write{55,277}
local	float	___330_rand2	%read{55,277} %write{55,277}
local	vector	___330_random_direction	%read{55,277} %write{55,277}
local	normal	___330_random_normal	%read{55,277} %write{55,277}
local	point	___330_cpp	%read{55,277} %write{55,277}
local	color	___330_tempcol	%read{55,277} %write{55,277}
local	float	cellfreq	%read{280,288} %write{278,278}
local	point	thiscell	%read{2147483647,-1} %write{291,291}
local	float	cellnumber	%read{2147483647,-1} %write{294,294}
local	float	n4	%read{306,308} %write{305,305}
local	color	colRGB	%read{309,312} %write{307,310}
const	int	$const1	0		%read{2,279} %write{2147483647,-1}
temp	float	$tmp1	%read{4,4} %write{2,2}
temp	float	$tmp2	%read{4,4} %write{3,3}
temp	float	$tmp3	%read{5,5} %write{4,4}
const	int	$const2	1		%read{6,283} %write{2147483647,-1}
temp	float	$tmp4	%read{8,8} %write{6,6}
temp	float	$tmp5	%read{8,8} %write{7,7}
temp	float	$tmp6	%read{9,9} %write{8,8}
const	int	$const3	2		%read{10,287} %write{2147483647,-1}
temp	float	$tmp7	%read{12,12} %write{10,10}
temp	float	$tmp8	%read{12,12} %write{11,11}
temp	float	$tmp9	%read{13,13} %write{12,12}
const	float	$const4	0.80000001		%read{14,256} %write{2147483647,-1}
const	float	$const5	3.2		%read{15,15} %write{2147483647,-1}
const	int	$const6	5		%read{16,17} %write{2147483647,-1}
const	float	$const7	5		%read{21,304} %write{2147483647,-1}
temp	float	$tmp10	%read{23,23} %write{22,22}
temp	float	$tmp11	%read{26,26} %write{24,24}
temp	float	$tmp12	%read{26,26} %write{25,25}
temp	float	$tmp13	%read{28,28} %write{26,26}
temp	float	$tmp14	%read{28,28} %write{27,27}
const	float	$const8	0.12		%read{29,29} %write{2147483647,-1}
const	float	$const9	0.0099999998		%read{30,215} %write{2147483647,-1}
const	float	$const10	0.050000001		%read{34,34} %write{2147483647,-1}
const	float	$const11	0.1		%read{43,308} %write{2147483647,-1}
const	int	$const12	3		%read{47,220} %write{2147483647,-1}
temp	int	$tmp15	%read{53,277} %write{54,277}
temp	int	$tmp16	%read{55,277} %write{55,277}
const	string	$const13	"perlin"		%read{71,302} %write{2147483647,-1}
const	float	$const14	1.414		%read{66,66} %write{2147483647,-1}
temp	float	$tmp17	%read{55,277} %write{55,277}
temp	float	$tmp18	%read{55,277} %write{55,277}
temp	point	$tmp19	%read{55,277} %write{55,277}
temp	int	$tmp20	%read{55,277} %write{55,277}
temp	point	$tmp21	%read{55,277} %write{55,277}
temp	point	$tmp22	%read{55,277} %write{55,277}
const	int	$const15	42		%read{72,72} %write{2147483647,-1}
temp	int	$tmp23	%read{55,277} %write{55,277}
temp	point	$tmp24	%read{55,277} %write{55,277}
temp	point	$tmp25	%read{55,277} %write{55,277}
temp	int	$tmp26	%read{55,277} %write{55,277}
temp	point	$tmp27	%read{55,277} %write{55,277}
temp	point	$tmp28	%read{55,277} %write{55,277}
const	float	$const16	3.1400001		%read{80,80} %write{2147483647,-1}
temp	float	$tmp29	%read{55,277} %write{55,277}
temp	float	$tmp30	%read{55,277} %write{55,277}
temp	point	$tmp31	%read{55,277} %write{55,277}
temp	int	$tmp32	%read{55,277} %write{55,277}
temp	point	$tmp33	%read{55,277} %write{55,277}
temp	point	$tmp34	%read{55,277} %write{55,277}
temp	float	$tmp35	%read{55,277} %write{55,277}
temp	float	$tmp36	%read{55,277} %write{55,277}
temp	float	$tmp37	%read{55,277} %write{55,277}
temp	float	$tmp38	%read{55,277} %write{55,277}
temp	float	$tmp39	%read{55,277} %write{55,277}
temp	float	$tmp40	%read{55,277} %write{55,277}
temp	float	$tmp41	%read{55,277} %write{55,277}
temp	float	$tmp42	%read{55,277} %write{55,277}
temp	float	$tmp43	%read{55,277} %write{55,277}
temp	float	$tmp44	%read{55,277} %write{55,277}
temp	float	$tmp45	%read{55,277} %write{55,277}
temp	float	$tmp46	%read{55,277} %write{55,277}
temp	float	$tmp47	%read{55,277} %write{55,277}
temp	float	$tmp48	%read{55,277} %write{55,277}
temp	float	$tmp49	%read{55,277} %write{55,277}
temp	float	$tmp50	%read{55,277} %write{55,277}
temp	float	$tmp51	%read{55,277} %write{55,277}
temp	float	$tmp52	%read{55,277} %write{55,277}
temp	float	$tmp53	%read{55,277} %write{55,277}
temp	float	$tmp54	%read{55,277} %write{55,277}
temp	float	$tmp55	%read{55,277} %write{55,277}
temp	float	$tmp56	%read{55,277} %write{55,277}
temp	float	$tmp57	%read{55,277} %write{55,277}
temp	float	$tmp58	%read{55,277} %write{55,277}
temp	float	$tmp59	%read{55,277} %write{55,277}
temp	float	$tmp60	%read{55,277} %write{55,277}
temp	float	$tmp61	%read{55,277} %write{55,277}
temp	point	$tmp62	%read{55,277} %write{55,277}
temp	float	$tmp63	%read{55,277} %write{55,277}
temp	float	$tmp64	%read{55,277} %write{55,277}
temp	float	$tmp65	%read{55,277} %write{55,277}
temp	float	$tmp66	%read{55,277} %write{55,277}
temp	float	$tmp67	%read{55,277} %write{55,277}
temp	float	$tmp68	%read{55,277} %write{55,277}
temp	float	$tmp69	%read{55,277} %write{55,277}
temp	float	$tmp70	%read{55,277} %write{55,277}
temp	float	$tmp71	%read{55,277} %write{55,277}
const	float	$const17	0		%read{172,308} %write{2147483647,-1}
const	float	$const19	15		%read{149,152} %write{2147483647,-1}
const	float	$const20	0.40000001		%read{151,246} %write{2147483647,-1}
const	string	$const21	"createCuttingPlane"		%read{128,219} %write{2147483647,-1}
temp	float	$tmp72	%read{55,277} %write{55,277}
temp	float	$tmp73	%read{55,277} %write{55,277}
temp	float	$tmp74	%read{55,277} %write{55,277}
temp	float	$tmp75	%read{55,277} %write{55,277}
temp	float	$tmp76	%read{55,277} %write{55,277}
temp	float	$tmp77	%read{55,277} %write{55,277}
temp	float	$tmp78	%read{55,277} %write{55,277}
temp	float	$tmp79	%read{55,277} %write{55,277}
temp	float	$tmp80	%read{55,277} %write{55,277}
temp	float	$tmp81	%read{55,277} %write{55,277}
temp	float	$tmp82	%read{55,277} %write{55,277}
temp	float	$tmp83	%read{55,277} %write{55,277}
temp	float	$tmp84	%read{55,277} %write{55,277}
const	string	$const22	"fbm2"		%read{148,296} %write{2147483647,-1}
temp	float	$tmp85	%read{55,277} %write{55,277}
temp	point	$tmp86	%read{55,277} %write{55,277}
temp	float	$tmp87	%read{55,277} %write{55,277}
temp	point	$tmp88	%read{55,277} %write{55,277}
temp	point	$tmp89	%read{55,277} %write{55,277}
temp	float	$tmp90	%read{55,277} %write{55,277}
temp	float	$tmp91	%read{55,277} %write{55,277}
temp	float	$tmp92	%read{55,277} %write{55,277}
temp	float	$tmp93	%read{55,277} %write{55,277}
temp	float	$tmp94	%read{55,277} %write{55,277}
temp	float	$tmp95	%read{55,277} %write{55,277}
temp	float	$tmp96	%read{55,277} %write{55,277}
temp	float	$tmp97	%read{55,277} %write{55,277}
temp	float	$tmp98	%read{55,277} %write{55,277}
const	float	$const23	1		%read{171,303} %write{2147483647,-1}
const	string	$const24	"clamp"		%read{170,263} %write{2147483647,-1}
temp	float	$tmp99	%read{55,277} %write{55,277}
temp	float	$tmp100	%read{55,277} %write{55,277}
temp	float	$tmp101	%read{55,277} %write{55,277}
temp	float	$tmp102	%read{55,277} %write{55,277}
temp	float	$tmp103	%read{55,277} %write{55,277}
temp	float	$tmp104	%read{55,277} %write{55,277}
temp	float	$tmp105	%read{55,277} %write{55,277}
temp	float	$tmp106	%read{55,277} %write{55,277}
temp	float	$tmp107	%read{55,277} %write{55,277}
temp	float	$tmp108	%read{55,277} %write{55,277}
temp	float	$tmp109	%read{55,277} %write{55,277}
temp	float	$tmp110	%read{55,277} %write{55,277}
temp	float	$tmp111	%read{55,277} %write{55,277}
temp	float	$tmp112	%read{55,277} %write{55,277}
temp	float	$tmp113	%read{55,277} %write{55,277}
temp	float	$tmp114	%read{55,277} %write{55,277}
temp	float	$tmp115	%read{55,277} %write{55,277}
temp	float	$tmp116	%read{55,277} %write{55,277}
temp	float	$tmp117	%read{55,277} %write{55,277}
temp	float	$tmp118	%read{55,277} %write{55,277}
temp	float	$tmp119	%read{55,277} %write{55,277}
temp	float	$tmp120	%read{55,277} %write{55,277}
temp	float	$tmp121	%read{55,277} %write{55,277}
temp	float	$tmp122	%read{55,277} %write{55,277}
temp	float	$tmp123	%read{55,277} %write{55,277}
temp	float	$tmp124	%read{55,277} %write{55,277}
temp	float	$tmp125	%read{55,277} %write{55,277}
temp	float	$tmp126	%read{55,277} %write{55,277}
temp	float	$tmp127	%read{55,277} %write{55,277}
temp	float	$tmp128	%read{55,277} %write{55,277}
temp	float	$tmp129	%read{55,277} %write{55,277}
temp	point	$tmp130	%read{55,277} %write{55,277}
temp	float	$tmp131	%read{55,277} %write{55,277}
temp	float	$tmp132	%read{55,277} %write{55,277}
temp	float	$tmp133	%read{55,277} %write{55,277}
temp	float	$tmp134	%read{55,277} %write{55,277}
temp	float	$tmp135	%read{55,277} %write{55,277}
temp	float	$tmp136	%read{55,277} %write{55,277}
temp	float	$tmp137	%read{55,277} %write{55,277}
temp	float	$tmp138	%read{55,277} %write{55,277}
temp	float	$tmp139	%read{55,277} %write{55,277}
temp	float	$tmp140	%read{55,277} %write{55,277}
temp	float	$tmp141	%read{55,277} %write{55,277}
temp	float	$tmp142	%read{55,277} %write{55,277}
const	float	$const25	3		%read{240,243} %write{2147483647,-1}
temp	float	$tmp143	%read{55,277} %write{55,277}
temp	float	$tmp144	%read{55,277} %write{55,277}
temp	float	$tmp145	%read{55,277} %write{55,277}
temp	float	$tmp146	%read{55,277} %write{55,277}
temp	float	$tmp147	%read{55,277} %write{55,277}
temp	float	$tmp148	%read{55,277} %write{55,277}
temp	float	$tmp149	%read{55,277} %write{55,277}
temp	float	$tmp150	%read{55,277} %write{55,277}
temp	float	$tmp151	%read{55,277} %write{55,277}
temp	float	$tmp152	%read{55,277} %write{55,277}
temp	float	$tmp153	%read{55,277} %write{55,277}
temp	float	$tmp154	%read{55,277} %write{55,277}
temp	float	$tmp155	%read{55,277} %write{55,277}
temp	float	$tmp156	%read{55,277} %write{55,277}
temp	point	$tmp157	%read{55,277} %write{55,277}
temp	float	$tmp158	%read{55,277} %write{55,277}
temp	point	$tmp159	%read{55,277} %write{55,277}
temp	point	$tmp160	%read{55,277} %write{55,277}
temp	float	$tmp161	%read{55,277} %write{55,277}
temp	float	$tmp162	%read{55,277} %write{55,277}
temp	float	$tmp163	%read{55,277} %write{55,277}
temp	float	$tmp164	%read{55,277} %write{55,277}
temp	float	$tmp165	%read{55,277} %write{55,277}
temp	float	$tmp166	%read{55,277} %write{55,277}
temp	float	$tmp167	%read{55,277} %write{55,277}
temp	float	$tmp168	%read{55,277} %write{55,277}
temp	float	$tmp169	%read{55,277} %write{55,277}
temp	float	$tmp170	%read{55,277} %write{55,277}
temp	float	$tmp171	%read{55,277} %write{55,277}
const	float	$const26	0.25		%read{270,306} %write{2147483647,-1}
const	float	$const27	0.69999999		%read{270,270} %write{2147483647,-1}
temp	float	$tmp172	%read{55,277} %write{55,277}
temp	point	$tmp173	%read{55,277} %write{55,277}
const	float	$const29	100		%read{268,268} %write{2147483647,-1}
temp	int	$tmp174	%read{2147483647,-1} %write{55,277}
temp	int	$tmp175	%read{2147483647,-1} %write{55,277}
temp	float	$tmp176	%read{282,282} %write{281,281}
temp	float	$tmp177	%read{280,280} %write{279,279}
temp	float	$tmp178	%read{281,281} %write{280,280}
temp	float	$tmp179	%read{291,291} %write{282,282}
temp	float	$tmp180	%read{286,286} %write{285,285}
temp	float	$tmp181	%read{284,284} %write{283,283}
temp	float	$tmp182	%read{285,285} %write{284,284}
temp	float	$tmp183	%read{291,291} %write{286,286}
temp	float	$tmp184	%read{290,290} %write{289,289}
temp	float	$tmp185	%read{288,288} %write{287,287}
temp	float	$tmp186	%read{289,289} %write{288,288}
temp	float	$tmp187	%read{291,291} %write{290,290}
const	string	$const30	"cell"		%read{294,294} %write{2147483647,-1}
temp	point	$tmp188	%read{294,294} %write{293,293}
temp	point	$tmp189	%read{293,293} %write{292,292}
temp	float	$tmp190	%read{297,300} %write{295,295}
temp	float	$tmp191	%read{299,299} %write{298,298}
temp	point	$tmp192	%read{298,298} %write{297,297}
temp	float	$tmp193	%read{303,303} %write{302,302}
temp	point	$tmp194	%read{301,301} %write{300,300}
temp	point	$tmp195	%read{302,302} %write{301,301}
temp	float	$tmp196	%read{304,304} %write{303,303}
const	float	$const31	0.5		%read{311,311} %write{2147483647,-1}
code ___main___
# exfoliation_color.osl:86
# point pp = Pobj;
	assign		pp Pobj 	%filename{"exfoliation_color.osl"} %line{86} %argrw{"wr"}
# exfoliation_color.osl:90
# normal dir_normalized = normalize(direction);
	normalize	dir_normalized direction 	%line{90} %argrw{"wr"}
# exfoliation_color.osl:91
# tpp[0] = dir_normalized[0] * pp[0];
	compref		$tmp1 dir_normalized $const1 	%line{91} %argrw{"wrr"}
	compref		$tmp2 pp $const1 	%argrw{"wrr"}
	mul		$tmp3 $tmp1 $tmp2 	%argrw{"wrr"}
	compassign	tpp $const1 $tmp3 	%argrw{"wrr"}
# exfoliation_color.osl:92
# tpp[1] = dir_normalized[1] * pp[1];
	compref		$tmp4 dir_normalized $const2 	%line{92} %argrw{"wrr"}
	compref		$tmp5 pp $const2 	%argrw{"wrr"}
	mul		$tmp6 $tmp4 $tmp5 	%argrw{"wrr"}
	compassign	tpp $const2 $tmp6 	%argrw{"wrr"}
# exfoliation_color.osl:93
# tpp[2] = dir_normalized[2] * pp[2];
	compref		$tmp7 dir_normalized $const3 	%line{93} %argrw{"wrr"}
	compref		$tmp8 pp $const3 	%argrw{"wrr"}
	mul		$tmp9 $tmp7 $tmp8 	%argrw{"wrr"}
	compassign	tpp $const3 $tmp9 	%argrw{"wrr"}
# exfoliation_color.osl:95
# float ampl = 0.8;
	assign		ampl $const4 	%line{95} %argrw{"wr"}
# exfoliation_color.osl:97
# float freq = 3.2;
	assign		freq $const5 	%line{97} %argrw{"wr"}
# exfoliation_color.osl:98
# float high_freq_multiplier = 5;
	assign		high_freq_multiplier $const6 	%line{98} %argrw{"wr"}
# exfoliation_color.osl:99
# float small_details_scale = 5;
	assign		small_details_scale $const6 	%line{99} %argrw{"wr"}
# exfoliation_color.osl:100
# float step_increase = step_size;
	assign		step_increase step_size 	%line{100} %argrw{"wr"}
# exfoliation_color.osl:101
# float s_min =  shader_property_0;
	assign		s_min shader_property_0 	%line{101} %argrw{"wr"}
# exfoliation_color.osl:102
# float s_max = s_min + step_increase;
	add		s_max s_min step_increase 	%line{102} %argrw{"wrr"}
# exfoliation_color.osl:103
# float s_min_col = s_min/5;
	div		s_min_col s_min $const7 	%line{103} %argrw{"wrr"}
# exfoliation_color.osl:104
# float s_max_col = s_min_col+ step_increase/5;
	div		$tmp10 step_increase $const7 	%line{104} %argrw{"wrr"}
	add		s_max_col s_min_col $tmp10 	%argrw{"wrr"}
# exfoliation_color.osl:106
# float k = tpp[0] + tpp[1]+tpp[2];
	compref		$tmp11 tpp $const1 	%line{106} %argrw{"wrr"}
	compref		$tmp12 tpp $const2 	%argrw{"wrr"}
	add		$tmp13 $tmp11 $tmp12 	%argrw{"wrr"}
	compref		$tmp14 tpp $const3 	%argrw{"wrr"}
	add		k $tmp13 $tmp14 	%argrw{"wrr"}
# exfoliation_color.osl:107
# step_increase = 0.12;
	assign		step_increase $const8 	%line{107} %argrw{"wr"}
# exfoliation_color.osl:108
# float offset = 0.01;
	assign		offset $const9 	%line{108} %argrw{"wr"}
# exfoliation_color.osl:109
# int i = 0;
	assign		i $const1 	%line{109} %argrw{"wr"}
# exfoliation_color.osl:110
# float blend = 0;
	assign		blend $const1 	%line{110} %argrw{"wr"}
# exfoliation_color.osl:111
# float blur = 0.01;
	assign		blur $const9 	%line{111} %argrw{"wr"}
# exfoliation_color.osl:113
# float noise_strength = 0.05;
	assign		noise_strength $const10 	%line{113} %argrw{"wr"}
# exfoliation_color.osl:114
# float minor_rings_offset= 0.01;
	assign		minor_rings_offset $const9 	%line{114} %argrw{"wr"}
# exfoliation_color.osl:115
# float minor_rings = 0;
	assign		minor_rings $const1 	%line{115} %argrw{"wr"}
# exfoliation_color.osl:116
# float res = 0;
	assign		res $const1 	%line{116} %argrw{"wr"}
# exfoliation_color.osl:117
# float temp = 0;
	assign		temp $const1 	%line{117} %argrw{"wr"}
# exfoliation_color.osl:118
# float s_min2 = 0;
	assign		s_min2 $const1 	%line{118} %argrw{"wr"}
# exfoliation_color.osl:119
# float s_max2 = 0;
	assign		s_max2 $const1 	%line{119} %argrw{"wr"}
# exfoliation_color.osl:120
# float s_min_col2 = 0;
	assign		s_min_col2 $const1 	%line{120} %argrw{"wr"}
# exfoliation_color.osl:121
# float s_max_col2 = 0;
	assign		s_max_col2 $const1 	%line{121} %argrw{"wr"}
# exfoliation_color.osl:122
# float randomness = 0.1;
	assign		randomness $const11 	%line{122} %argrw{"wr"}
# exfoliation_color.osl:123
# float randomness2 = 0.01;//0.1;
	assign		randomness2 $const9 	%line{123} %argrw{"wr"}
# exfoliation_color.osl:124
# float color_ring = 0;
	assign		color_ring $const1 	%line{124} %argrw{"wr"}
# exfoliation_color.osl:125
# color cols = base_color;
	assign		cols base_color 	%line{125} %argrw{"wr"}
# exfoliation_color.osl:126
# float random_multiplier =  3;
	assign		random_multiplier $const12 	%line{126} %argrw{"wr"}
# exfoliation_color.osl:127
# float	 temp2= 0;
	assign		temp2 $const1 	%line{127} %argrw{"wr"}
# exfoliation_color.osl:128
# int j = 0;
	assign		j $const1 	%line{128} %argrw{"wr"}
# exfoliation_color.osl:129
# float color_ring2 = 0;
	assign		color_ring2 $const1 	%line{129} %argrw{"wr"}
# exfoliation_color.osl:130
# float color_offset = 0.01;
	assign		color_offset $const9 	%line{130} %argrw{"wr"}
# exfoliation_color.osl:131
# color col = base_color;
	assign		col base_color 	%line{131} %argrw{"wr"}
# exfoliation_color.osl:133
# for(j = 0; j<details; j++)
	for		$tmp15 55 56 276 278 	%line{133} %argrw{"r"}
	assign		j $const1 	%argrw{"wr"}
	lt		$tmp15 j details 	%argrw{"wrr"}
# exfoliation_color.osl:135
# s_min += step_increase; 
	add		s_min s_min step_increase 	%line{135} %argrw{"wrr"}
# exfoliation_color.osl:136
# s_max += step_increase;
	add		s_max s_max step_increase 	%line{136} %argrw{"wrr"}
# exfoliation_color.osl:137
# s_max_col += step_increase;
	add		s_max_col s_max_col step_increase 	%line{137} %argrw{"wrr"}
# exfoliation_color.osl:138
# s_min_col += step_increase;
	add		s_min_col s_min_col step_increase 	%line{138} %argrw{"wrr"}
# exfoliation_color.osl:139
# temp = 0;
	assign		temp $const1 	%line{139} %argrw{"wr"}
# exfoliation_color.osl:140
# temp2 = 0;
	assign		temp2 $const1 	%line{140} %argrw{"wr"}
# exfoliation_color.osl:141
# for ( i = 0; i < medium_details;i++)
	for		$tmp16 64 65 272 274 	%line{141} %argrw{"r"}
	assign		i $const1 	%argrw{"wr"}
	lt		$tmp16 i medium_details 	%argrw{"wrr"}
# exfoliation_color.osl:143
# float rand0 = noise("perlin",pp + i * 1.414 + j*medium_details);
	assign		$tmp18 i 	%line{143} %argrw{"wr"}
	mul		$tmp17 $tmp18 $const14 	%argrw{"wrr"}
	add		$tmp19 pp $tmp17 	%argrw{"wrr"}
	mul		$tmp20 j medium_details 	%argrw{"wrr"}
	assign		$tmp22 $tmp20 	%argrw{"wr"}
	add		$tmp21 $tmp19 $tmp22 	%argrw{"wrr"}
	noise		___330_rand0 $const13 $tmp21 	%argrw{"wrr"}
# exfoliation_color.osl:144
# float rand1 = noise("perlin",pp + i * 42+ j*medium_details);
	mul		$tmp23 i $const15 	%line{144} %argrw{"wrr"}
	assign		$tmp25 $tmp23 	%argrw{"wr"}
	add		$tmp24 pp $tmp25 	%argrw{"wrr"}
	mul		$tmp26 j medium_details 	%argrw{"wrr"}
	assign		$tmp28 $tmp26 	%argrw{"wr"}
	add		$tmp27 $tmp24 $tmp28 	%argrw{"wrr"}
	noise		___330_rand1 $const13 $tmp27 	%argrw{"wrr"}
# exfoliation_color.osl:145
# float rand2 = noise("perlin",pp + i * 3.14+ j*medium_details);
	assign		$tmp30 i 	%line{145} %argrw{"wr"}
	mul		$tmp29 $tmp30 $const16 	%argrw{"wrr"}
	add		$tmp31 pp $tmp29 	%argrw{"wrr"}
	mul		$tmp32 j medium_details 	%argrw{"wrr"}
	assign		$tmp34 $tmp32 	%argrw{"wr"}
	add		$tmp33 $tmp31 $tmp34 	%argrw{"wrr"}
	noise		___330_rand2 $const13 $tmp33 	%argrw{"wrr"}
# exfoliation_color.osl:147
# vector random_direction = vector(dir_normalized[0]+rand0*randomness2,dir_normalized[1]+rand1*randomness2,dir_normalized[2]+rand2*randomness2);
	compref		$tmp35 dir_normalized $const1 	%line{147} %argrw{"wrr"}
	mul		$tmp36 ___330_rand0 randomness2 	%argrw{"wrr"}
	add		$tmp37 $tmp35 $tmp36 	%argrw{"wrr"}
	compref		$tmp38 dir_normalized $const2 	%argrw{"wrr"}
	mul		$tmp39 ___330_rand1 randomness2 	%argrw{"wrr"}
	add		$tmp40 $tmp38 $tmp39 	%argrw{"wrr"}
	compref		$tmp41 dir_normalized $const3 	%argrw{"wrr"}
	mul		$tmp42 ___330_rand2 randomness2 	%argrw{"wrr"}
	add		$tmp43 $tmp41 $tmp42 	%argrw{"wrr"}
	vector		___330_random_direction $tmp37 $tmp40 $tmp43 	%argrw{"wrrr"}
# exfoliation_color.osl:148
# normal random_normal = normalize(random_direction);
	normalize	___330_random_normal ___330_random_direction 	%line{148} %argrw{"wr"}
# exfoliation_color.osl:149
# s_max2 = s_max +  minor_rings_offset*((i*0.8/medium_details)+0.1);
	assign		$tmp45 i 	%line{149} %argrw{"wr"}
	mul		$tmp44 $tmp45 $const4 	%argrw{"wrr"}
	assign		$tmp47 medium_details 	%argrw{"wr"}
	div		$tmp46 $tmp44 $tmp47 	%argrw{"wrr"}
	add		$tmp48 $tmp46 $const11 	%argrw{"wrr"}
	mul		$tmp49 minor_rings_offset $tmp48 	%argrw{"wrr"}
	add		s_max2 s_max $tmp49 	%argrw{"wrr"}
# exfoliation_color.osl:150
# s_max_col2 = s_max_col +  minor_rings_offset*((i*0.8/medium_details)+0.1);
	assign		$tmp51 i 	%line{150} %argrw{"wr"}
	mul		$tmp50 $tmp51 $const4 	%argrw{"wrr"}
	assign		$tmp53 medium_details 	%argrw{"wr"}
	div		$tmp52 $tmp50 $tmp53 	%argrw{"wrr"}
	add		$tmp54 $tmp52 $const11 	%argrw{"wrr"}
	mul		$tmp55 minor_rings_offset $tmp54 	%argrw{"wrr"}
	add		s_max_col2 s_max_col $tmp55 	%argrw{"wrr"}
# exfoliation_color.osl:151
# s_min_col2 = s_min_col +  minor_rings_offset*((i*0.8/medium_details)+0.1);
	assign		$tmp57 i 	%line{151} %argrw{"wr"}
	mul		$tmp56 $tmp57 $const4 	%argrw{"wrr"}
	assign		$tmp59 medium_details 	%argrw{"wr"}
	div		$tmp58 $tmp56 $tmp59 	%argrw{"wrr"}
	add		$tmp60 $tmp58 $const11 	%argrw{"wrr"}
	mul		$tmp61 minor_rings_offset $tmp60 	%argrw{"wrr"}
	add		s_min_col2 s_min_col $tmp61 	%argrw{"wrr"}
# exfoliation_color.osl:152
# minor_rings = createCuttingPlane( random_normal, point(pp[0] + rand0*randomness,pp[1] + rand1*randomness,pp[2] + rand2*randomness) ,0, s_max2,15, 0.4,noise_strength, blur);
	compref		$tmp63 pp $const1 	%line{152} %argrw{"wrr"}
	mul		$tmp64 ___330_rand0 randomness 	%argrw{"wrr"}
	add		$tmp65 $tmp63 $tmp64 	%argrw{"wrr"}
	compref		$tmp66 pp $const2 	%argrw{"wrr"}
	mul		$tmp67 ___330_rand1 randomness 	%argrw{"wrr"}
	add		$tmp68 $tmp66 $tmp67 	%argrw{"wrr"}
	compref		$tmp69 pp $const3 	%argrw{"wrr"}
	mul		$tmp70 ___330_rand2 randomness 	%argrw{"wrr"}
	add		$tmp71 $tmp69 $tmp70 	%argrw{"wrr"}
	point		$tmp62 $tmp65 $tmp68 $tmp71 	%argrw{"wrrr"}
	functioncall	$const21 163 	%argrw{"r"}
# exfoliation_color.osl:36
# 	float high_freq_multiplier = 3 ;
	assign		___326_high_freq_multiplier $const12 	%line{36} %argrw{"wr"}
# exfoliation_color.osl:37
# 	normal dir_normalized = normalize(direction);
	normalize	___326_dir_normalized ___330_random_normal 	%line{37} %argrw{"wr"}
# exfoliation_color.osl:38
# 	tpp[0] = dir_normalized[0] * pp[0];
	compref		$tmp72 ___326_dir_normalized $const1 	%line{38} %argrw{"wrr"}
	compref		$tmp73 $tmp62 $const1 	%argrw{"wrr"}
	mul		$tmp74 $tmp72 $tmp73 	%argrw{"wrr"}
	compassign	___326_tpp $const1 $tmp74 	%argrw{"wrr"}
# exfoliation_color.osl:39
# 	tpp[1] = dir_normalized[1] * pp[1];
	compref		$tmp75 ___326_dir_normalized $const2 	%line{39} %argrw{"wrr"}
	compref		$tmp76 $tmp62 $const2 	%argrw{"wrr"}
	mul		$tmp77 $tmp75 $tmp76 	%argrw{"wrr"}
	compassign	___326_tpp $const2 $tmp77 	%argrw{"wrr"}
# exfoliation_color.osl:40
# 	tpp[2] = dir_normalized[2] * pp[2];
	compref		$tmp78 ___326_dir_normalized $const3 	%line{40} %argrw{"wrr"}
	compref		$tmp79 $tmp62 $const3 	%argrw{"wrr"}
	mul		$tmp80 $tmp78 $tmp79 	%argrw{"wrr"}
	compassign	___326_tpp $const3 $tmp80 	%argrw{"wrr"}
# exfoliation_color.osl:41
# 	float k = tpp[0] + tpp[1]+tpp[2];
	compref		$tmp81 ___326_tpp $const1 	%line{41} %argrw{"wrr"}
	compref		$tmp82 ___326_tpp $const2 	%argrw{"wrr"}
	add		$tmp83 $tmp81 $tmp82 	%argrw{"wrr"}
	compref		$tmp84 ___326_tpp $const3 	%argrw{"wrr"}
	add		___326_k $tmp83 $tmp84 	%argrw{"wrr"}
# exfoliation_color.osl:42
# 	float n = fbm2(pp,freq,ampl,high_freq_multiplier);
	functioncall	$const22 158 	%line{42} %argrw{"r"}
# exfoliation_color.osl:23
# 		float n2= noise("perlin",pp*freq ) * ampl ;
	mul		$tmp86 $tmp62 $const19 	%line{23} %argrw{"wrr"}
	noise		$tmp85 $const13 $tmp86 	%argrw{"wrr"}
	mul		___325_n2 $tmp85 $const20 	%argrw{"wrr"}
# exfoliation_color.osl:24
# 	float n3= noise("perlin",pp*freq*high_freq_multiplier ) * ampl/high_freq_multiplier ;
	mul		$tmp88 $tmp62 $const19 	%line{24} %argrw{"wrr"}
	mul		$tmp89 $tmp88 ___326_high_freq_multiplier 	%argrw{"wrr"}
	noise		$tmp87 $const13 $tmp89 	%argrw{"wrr"}
	mul		$tmp90 $tmp87 $const20 	%argrw{"wrr"}
	div		___325_n3 $tmp90 ___326_high_freq_multiplier 	%argrw{"wrr"}
# exfoliation_color.osl:25
# 	return  n2 + n3;
	add		___326_n ___325_n2 ___325_n3 	%line{25} %argrw{"wrr"}
# exfoliation_color.osl:43
# 	k = k + n* noise_stregth;
	mul		$tmp91 ___326_n noise_strength 	%line{43} %argrw{"wrr"}
	add		___326_k ___326_k $tmp91 	%argrw{"wrr"}
# exfoliation_color.osl:44
# 	float blend = ( smoothstep(s_max - blur, s_max, k));
	sub		$tmp92 s_max2 blur 	%line{44} %argrw{"wrr"}
	smoothstep	___326_blend $tmp92 s_max2 ___326_k 	%argrw{"wrrr"}
# exfoliation_color.osl:48
# return blend;
	assign		minor_rings ___326_blend 	%line{48} %argrw{"wr"}
# exfoliation_color.osl:154
# temp = max(temp , minor_rings * ((i*0.8/medium_details)+0.1) );
	assign		$tmp94 i 	%line{154} %argrw{"wr"}
	mul		$tmp93 $tmp94 $const4 	%argrw{"wrr"}
	assign		$tmp96 medium_details 	%argrw{"wr"}
	div		$tmp95 $tmp93 $tmp96 	%argrw{"wrr"}
	add		$tmp97 $tmp95 $const11 	%argrw{"wrr"}
	mul		$tmp98 minor_rings $tmp97 	%argrw{"wrr"}
	max		temp temp $tmp98 	%argrw{"wrr"}
# exfoliation_color.osl:157
# temp = clamp ( temp,0, 1);
	functioncall	$const24 173 	%line{157} %argrw{"r"}
# /opt/pixar/RenderManProServer-22.6/lib/osl/include/stdosl.h:145
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp99 temp $const23 	%filename{"/opt/pixar/RenderManProServer-22.6/lib/osl/include/stdosl.h"} %line{145} %argrw{"wrr"}
	max		temp $tmp99 $const17 	%argrw{"wrr"}
# exfoliation_color.osl:158
# 	float n = n2 + n3;
	assign		$tmp101 i 	%filename{"exfoliation_color.osl"} %line{158} %argrw{"wr"}
	mul		$tmp100 $tmp101 $const4 	%argrw{"wrr"}
	assign		$tmp103 medium_details 	%argrw{"wr"}
	div		$tmp102 $tmp100 $tmp103 	%argrw{"wrr"}
	add		$tmp104 $tmp102 $const11 	%argrw{"wrr"}
	mul		$tmp105 minor_rings_offset $tmp104 	%argrw{"wrr"}
	add		s_min2 s_min $tmp105 	%argrw{"wrr"}
# exfoliation_color.osl:159
# 	k = k + n* noise_stregth;
	compref		$tmp106 pp $const1 	%line{159} %argrw{"wrr"}
	compref		$tmp107 ___330_random_normal $const1 	%argrw{"wrr"}
	mul		$tmp108 $tmp107 color_offset 	%argrw{"wrr"}
	add		$tmp109 $tmp106 $tmp108 	%argrw{"wrr"}
	compref		$tmp110 pp $const2 	%argrw{"wrr"}
	compref		$tmp111 ___330_random_normal $const2 	%argrw{"wrr"}
	mul		$tmp112 $tmp111 color_offset 	%argrw{"wrr"}
	add		$tmp113 $tmp110 $tmp112 	%argrw{"wrr"}
	compref		$tmp114 pp $const3 	%argrw{"wrr"}
	compref		$tmp115 ___330_random_normal $const3 	%argrw{"wrr"}
	mul		$tmp116 $tmp115 color_offset 	%argrw{"wrr"}
	add		$tmp117 $tmp114 $tmp116 	%argrw{"wrr"}
	point		___330_cpp $tmp109 $tmp113 $tmp117 	%argrw{"wrrr"}
# exfoliation_color.osl:160
# 	float blend = smoothstep(s_min, s_min + blur, k) *
	compref		$tmp118 pp $const1 	%line{160} %argrw{"wrr"}
	mul		$tmp119 ___330_rand0 randomness 	%argrw{"wrr"}
	mul		$tmp120 $tmp119 random_multiplier 	%argrw{"wrr"}
	add		$tmp121 $tmp118 $tmp120 	%argrw{"wrr"}
	compref		$tmp122 pp $const2 	%argrw{"wrr"}
	mul		$tmp123 ___330_rand1 randomness 	%argrw{"wrr"}
	mul		$tmp124 $tmp123 random_multiplier 	%argrw{"wrr"}
	add		$tmp125 $tmp122 $tmp124 	%argrw{"wrr"}
	compref		$tmp126 pp $const3 	%argrw{"wrr"}
	mul		$tmp127 ___330_rand2 randomness 	%argrw{"wrr"}
	mul		$tmp128 $tmp127 random_multiplier 	%argrw{"wrr"}
	add		$tmp129 $tmp126 $tmp128 	%argrw{"wrr"}
	point		___330_cpp $tmp121 $tmp125 $tmp129 	%argrw{"wrrr"}
# exfoliation_color.osl:162
# return blend;
	compref		$tmp131 pp $const1 	%line{162} %argrw{"wrr"}
	sub		$tmp132 $tmp131 $const9 	%argrw{"wrr"}
	mul		$tmp133 ___330_rand0 randomness 	%argrw{"wrr"}
	add		$tmp134 $tmp132 $tmp133 	%argrw{"wrr"}
	compref		$tmp135 pp $const2 	%argrw{"wrr"}
	sub		$tmp136 $tmp135 $const9 	%argrw{"wrr"}
	mul		$tmp137 ___330_rand1 randomness 	%argrw{"wrr"}
	add		$tmp138 $tmp136 $tmp137 	%argrw{"wrr"}
	compref		$tmp139 pp $const3 	%argrw{"wrr"}
	sub		$tmp140 $tmp139 $const9 	%argrw{"wrr"}
	mul		$tmp141 ___330_rand2 randomness 	%argrw{"wrr"}
	add		$tmp142 $tmp140 $tmp141 	%argrw{"wrr"}
	point		$tmp130 $tmp134 $tmp138 $tmp142 	%argrw{"wrrr"}
	functioncall	$const21 254 	%argrw{"r"}
# exfoliation_color.osl:36
# 	float high_freq_multiplier = 3 ;
	assign		___326_high_freq_multiplier $const12 	%line{36} %argrw{"wr"}
# exfoliation_color.osl:37
# 	normal dir_normalized = normalize(direction);
	normalize	___326_dir_normalized ___330_random_normal 	%line{37} %argrw{"wr"}
# exfoliation_color.osl:38
# 	tpp[0] = dir_normalized[0] * pp[0];
	compref		$tmp143 ___326_dir_normalized $const1 	%line{38} %argrw{"wrr"}
	compref		$tmp144 $tmp130 $const1 	%argrw{"wrr"}
	mul		$tmp145 $tmp143 $tmp144 	%argrw{"wrr"}
	compassign	___326_tpp $const1 $tmp145 	%argrw{"wrr"}
# exfoliation_color.osl:39
# 	tpp[1] = dir_normalized[1] * pp[1];
	compref		$tmp146 ___326_dir_normalized $const2 	%line{39} %argrw{"wrr"}
	compref		$tmp147 $tmp130 $const2 	%argrw{"wrr"}
	mul		$tmp148 $tmp146 $tmp147 	%argrw{"wrr"}
	compassign	___326_tpp $const2 $tmp148 	%argrw{"wrr"}
# exfoliation_color.osl:40
# 	tpp[2] = dir_normalized[2] * pp[2];
	compref		$tmp149 ___326_dir_normalized $const3 	%line{40} %argrw{"wrr"}
	compref		$tmp150 $tmp130 $const3 	%argrw{"wrr"}
	mul		$tmp151 $tmp149 $tmp150 	%argrw{"wrr"}
	compassign	___326_tpp $const3 $tmp151 	%argrw{"wrr"}
# exfoliation_color.osl:41
# 	float k = tpp[0] + tpp[1]+tpp[2];
	compref		$tmp152 ___326_tpp $const1 	%line{41} %argrw{"wrr"}
	compref		$tmp153 ___326_tpp $const2 	%argrw{"wrr"}
	add		$tmp154 $tmp152 $tmp153 	%argrw{"wrr"}
	compref		$tmp155 ___326_tpp $const3 	%argrw{"wrr"}
	add		___326_k $tmp154 $tmp155 	%argrw{"wrr"}
# exfoliation_color.osl:42
# 	float n = fbm2(pp,freq,ampl,high_freq_multiplier);
	functioncall	$const22 249 	%line{42} %argrw{"r"}
# exfoliation_color.osl:23
# 		float n2= noise("perlin",pp*freq ) * ampl ;
	mul		$tmp157 $tmp130 $const25 	%line{23} %argrw{"wrr"}
	noise		$tmp156 $const13 $tmp157 	%argrw{"wrr"}
	mul		___325_n2 $tmp156 $const20 	%argrw{"wrr"}
# exfoliation_color.osl:24
# 	float n3= noise("perlin",pp*freq*high_freq_multiplier ) * ampl/high_freq_multiplier ;
	mul		$tmp159 $tmp130 $const25 	%line{24} %argrw{"wrr"}
	mul		$tmp160 $tmp159 ___326_high_freq_multiplier 	%argrw{"wrr"}
	noise		$tmp158 $const13 $tmp160 	%argrw{"wrr"}
	mul		$tmp161 $tmp158 $const20 	%argrw{"wrr"}
	div		___325_n3 $tmp161 ___326_high_freq_multiplier 	%argrw{"wrr"}
# exfoliation_color.osl:25
# 	return  n2 + n3;
	add		___326_n ___325_n2 ___325_n3 	%line{25} %argrw{"wrr"}
# exfoliation_color.osl:43
# 	k = k + n* noise_stregth;
	mul		$tmp162 ___326_n noise_strength 	%line{43} %argrw{"wrr"}
	add		___326_k ___326_k $tmp162 	%argrw{"wrr"}
# exfoliation_color.osl:44
# 	float blend = ( smoothstep(s_max - blur, s_max, k));
	sub		$tmp163 s_max2 blur 	%line{44} %argrw{"wrr"}
	smoothstep	___326_blend $tmp163 s_max2 ___326_k 	%argrw{"wrrr"}
# exfoliation_color.osl:48
# return blend;
	assign		color_ring ___326_blend 	%line{48} %argrw{"wr"}
# exfoliation_color.osl:163
# color_ring2 = minor_rings - color_ring;
	sub		color_ring2 minor_rings color_ring 	%line{163} %argrw{"wrr"}
# exfoliation_color.osl:164
# temp2 = max(temp2,color_ring2*((i*0.8/medium_details)+0.1) );
	assign		$tmp165 i 	%line{164} %argrw{"wr"}
	mul		$tmp164 $tmp165 $const4 	%argrw{"wrr"}
	assign		$tmp167 medium_details 	%argrw{"wr"}
	div		$tmp166 $tmp164 $tmp167 	%argrw{"wrr"}
	add		$tmp168 $tmp166 $const11 	%argrw{"wrr"}
	mul		$tmp169 color_ring2 $tmp168 	%argrw{"wrr"}
	max		temp2 temp2 $tmp169 	%argrw{"wrr"}
# exfoliation_color.osl:167
# color tempcol = mincolor;
	assign		___330_tempcol mincolor 	%line{167} %argrw{"wr"}
# exfoliation_color.osl:168
# color_ring2 = clamp ( color_ring2,0, 1);
	functioncall	$const24 266 	%line{168} %argrw{"r"}
# /opt/pixar/RenderManProServer-22.6/lib/osl/include/stdosl.h:145
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp170 color_ring2 $const23 	%filename{"/opt/pixar/RenderManProServer-22.6/lib/osl/include/stdosl.h"} %line{145} %argrw{"wrr"}
	max		color_ring2 $tmp170 $const17 	%argrw{"wrr"}
# exfoliation_color.osl:170
# 	return  n2 + n3;
	mix		col col base_color color_ring 	%filename{"exfoliation_color.osl"} %line{170} %argrw{"wrrr"}
# exfoliation_color.osl:171
# 	
	mix		col col ___330_tempcol color_ring2 	%line{171} %argrw{"wrrr"}
# exfoliation_color.osl:172
# }
	mul		$tmp173 $const29 ___330_cpp 	%line{172} %argrw{"wrr"}
	noise		$tmp172 $const13 $tmp173 	%argrw{"wrr"}
	smoothstep	$tmp171 $const26 $const27 $tmp172 	%argrw{"wrrr"}
	mix		col col base_color $tmp171 	%argrw{"wrrr"}
# exfoliation_color.osl:141
# for ( i = 0; i < medium_details;i++)
	assign		$tmp174 i 	%line{141} %argrw{"wr"}
	add		i i $const2 	%argrw{"wrr"}
# exfoliation_color.osl:178
# res += temp;
	add		res res temp 	%line{178} %argrw{"wrr"}
# exfoliation_color.osl:179
# cols += temp2;
	add		cols cols temp2 	%line{179} %argrw{"wrr"}
# exfoliation_color.osl:133
# for(j = 0; j<details; j++)
	assign		$tmp175 j 	%line{133} %argrw{"wr"}
	add		j j $const2 	%argrw{"wrr"}
# exfoliation_color.osl:181
# float cellfreq = scale;
	assign		cellfreq scale 	%line{181} %argrw{"wr"}
# exfoliation_color.osl:183
# point thiscell = point(    trunc(pp[0]*cellfreq) + offset,
	compref		$tmp177 pp $const1 	%line{183} %argrw{"wrr"}
	mul		$tmp178 $tmp177 cellfreq 	%argrw{"wrr"}
	trunc		$tmp176 $tmp178 	%argrw{"wr"}
	add		$tmp179 $tmp176 offset 	%argrw{"wrr"}
# exfoliation_color.osl:184
#                            trunc(pp[1]*cellfreq) + offset,
	compref		$tmp181 pp $const2 	%line{184} %argrw{"wrr"}
	mul		$tmp182 $tmp181 cellfreq 	%argrw{"wrr"}
	trunc		$tmp180 $tmp182 	%argrw{"wr"}
	add		$tmp183 $tmp180 offset 	%argrw{"wrr"}
# exfoliation_color.osl:185
#                            trunc(pp[2]*cellfreq) + offset);
	compref		$tmp185 pp $const3 	%line{185} %argrw{"wrr"}
	mul		$tmp186 $tmp185 cellfreq 	%argrw{"wrr"}
	trunc		$tmp184 $tmp186 	%argrw{"wr"}
	add		$tmp187 $tmp184 offset 	%argrw{"wrr"}
	point		thiscell $tmp179 $tmp183 $tmp187 	%argrw{"wrrr"}
# exfoliation_color.osl:187
# float cellnumber = noise("cell",scale*pp  );
	assign		$tmp189 scale 	%line{187} %argrw{"wr"}
	mul		$tmp188 $tmp189 pp 	%argrw{"wrr"}
	noise		cellnumber $const30 $tmp188 	%argrw{"wrr"}
# exfoliation_color.osl:192
# float n4 = fbm2(pp,5*small_details_scale,1,5);
	mul		$tmp190 $const7 small_details_scale 	%line{192} %argrw{"wrr"}
	functioncall	$const22 306 	%argrw{"r"}
# exfoliation_color.osl:23
# 		float n2= noise("perlin",pp*freq ) * ampl ;
	mul		$tmp192 pp $tmp190 	%line{23} %argrw{"wrr"}
	noise		$tmp191 $const13 $tmp192 	%argrw{"wrr"}
	mul		___325_n2 $tmp191 $const23 	%argrw{"wrr"}
# exfoliation_color.osl:24
# 	float n3= noise("perlin",pp*freq*high_freq_multiplier ) * ampl/high_freq_multiplier ;
	mul		$tmp194 pp $tmp190 	%line{24} %argrw{"wrr"}
	mul		$tmp195 $tmp194 $const7 	%argrw{"wrr"}
	noise		$tmp193 $const13 $tmp195 	%argrw{"wrr"}
	mul		$tmp196 $tmp193 $const23 	%argrw{"wrr"}
	div		___325_n3 $tmp196 $const7 	%argrw{"wrr"}
# exfoliation_color.osl:25
# 	return  n2 + n3;
	add		n4 ___325_n2 ___325_n3 	%line{25} %argrw{"wrr"}
# exfoliation_color.osl:193
# temp = smoothstep(0.1,0.25,n4);
	smoothstep	temp $const11 $const26 n4 	%line{193} %argrw{"wrrr"}
# exfoliation_color.osl:195
# color colRGB = mix(col,maxcolor,temp);
	mix		colRGB col maxcolor temp 	%line{195} %argrw{"wrrr"}
# exfoliation_color.osl:196
# temp = smoothstep(0,0.1,n4);
	smoothstep	temp $const17 $const11 n4 	%line{196} %argrw{"wrrr"}
# exfoliation_color.osl:197
# colRGB = mix (mincolor,colRGB,temp);
	mix		colRGB mincolor colRGB temp 	%line{197} %argrw{"wrrr"}
# exfoliation_color.osl:198
# colRGB = col;
	assign		colRGB col 	%line{198} %argrw{"wr"}
# exfoliation_color.osl:199
# resultF = 0.5*res;
	mul		resultF $const31 res 	%line{199} %argrw{"wrr"}
# exfoliation_color.osl:201
# resultRGB = colRGB;
	assign		resultRGB colRGB 	%line{201} %argrw{"wr"}
	end
